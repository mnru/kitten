def newline (->): "\n" __stdout __print
def print ([Char] ->): __stdout __print
def cat ([a] [a] -> [a]): __add_vector
def > (Int Int -> Bool): __gt_int
def = (Int Int -> Bool): __eq_int
def if (.r Bool (.r -> .r) -> .r): __if
def if_else (.r Bool (.r -> .s) (.r -> .s) -> .s): __if_else
def showInt (Int -> [Char]): __show_int
def -- (Int -> Int): 1 __sub_int

1 bottlesOfBeer

def bottlesOfBeer (Int ->):
  -> x
  x verse
  \if (x 1 >):
    x-- bottlesOfBeer

def verse (Int ->):
  -> x
  x wall newline
  x beer newline
  take newline
  x-- wall newline
  newline

def beer (Int ->):
  bottles " of beer" print

def wall (Int ->):
  beer " on the wall" print

def take (->):
  "take one down, pass it around" print

def bottles (Int ->):
  -> x
  \if (x 0 =) {
    "no more bottles"
  } else {
    \if (x 1 =) {
      "one bottle"
    } else {
      x showInt " bottles" cat
    }
  }
  print
